# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18jB0YXugAtDynrmIFcJzqOeQlV51CPtM

# Melakukan Import Librarise yang akan digunakan Analisis
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.arima.model import ARIMA
import cv2

"""# Membaca Dataset Yang akan Digunakan Dalam Analisis Perpajakan"""

file_path ="/content/Rincian Pembayaran Pajak Hiburan, Reklame dan Perparkiran Menurut Bulan di Wilayah DKI Jakarta (1).csv"
df = pd.read_csv(file_path)

df.head()

"""# Membuat Grafik Mengenai Tren Pembayaran Pajak per Bulan di Daerah DKI JAKARTA"""

# Convert realisasi ke angka
df["realisasi"] = pd.to_numeric(df["realisasi"].astype(str).str.replace(".", "", regex=False), errors='coerce').astype(int)

# Rata" total pajak per bulan
monthly_tax = df.groupby("bulan")["realisasi"].sum()

# Menampilkan Grafik
plt.figure(figsize=(10, 5))
plt.plot(monthly_tax.index, monthly_tax.values, marker="o", linestyle="-", color="b")
plt.xlabel("Bulan")
plt.ylabel("Total Pajak (Rp)")
plt.title("Tren Pembayaran Pajak per Bulan di DKI Jakarta")
plt.xticks(range(1, 13))
plt.grid(True)

"""# Heatmap pembayaran pajak per bulan di DKI Jakarta berdasarkan jenis pajak. Warna yang lebih gelap menunjukkan pembayaran pajak yang lebih tinggi. Dari sini, kita bisa melihat pola musiman dalam pembayaran pajak."""

df["realisasi"] = pd.to_numeric(df["realisasi"].astype(str).str.replace(".", "", regex=False), errors='coerce').astype(float)

heatmap_data = df.pivot_table(values="realisasi", index="jenis_pajak", columns="bulan", aggfunc="sum")

plt.figure(figsize=(50, 10))
sns.heatmap(heatmap_data, cmap="coolwarm", annot=True, fmt=".0f", linewidths=0.5, annot_kws={"size": 10})
plt.title("Heatmap Pembayaran Pajak per Bulan di DKI Jakarta", fontsize=14)
plt.xlabel("Bulan", fontsize=12)
plt.ylabel("Jenis Pajak", fontsize=12)
plt.xticks(rotation=45)
plt.yticks(rotation=0)
plt.show()

correlation_matrix = df.pivot_table(values="realisasi", index="jenis_pajak", columns="bulan", aggfunc="sum").corr()


plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, cmap="coolwarm", annot=True, fmt=".2f", linewidths=0.5)
plt.title("Korelasi Pembayaran Pajak Antar Bulan di DKI Jakarta")
plt.xlabel("Bulan")
plt.ylabel("Bulan")
plt.show()

# Ubah kolom bulan ke format datetime dengan tahun yang otomatis dideteksi
df["bulan"] = pd.to_datetime(df["bulan"], errors='coerce')  # Try to infer format automatically

# Pastikan data diurutkan berdasarkan bulan
df = df.sort_values("bulan")
# Agregasi data berdasarkan bulan
time_series_data = df.groupby("bulan")["realisasi"].sum()

# Buat model ARIMA
model = ARIMA(time_series_data, order=(2, 1, 2))  # Parameter (p,d,q) bisa disesuaikan
model_fit = model.fit()

# Prediksi 6 bulan ke depan dengan confidence interval
forecast_steps = 6
forecast_index = pd.date_range(start=time_series_data.index[-1] + pd.DateOffset(months=1), periods=forecast_steps, freq="M")

# Get the forecast values only
forecast = model_fit.forecast(steps=forecast_steps)

# Get confidence intervals using get_forecast
conf_int = model_fit.get_forecast(steps=forecast_steps).conf_int(alpha=0.05)

# Access confidence intervals using column names
lower_conf = conf_int['lower realisasi']  # Replace 'lower realisasi' with actual column name
upper_conf = conf_int['upper realisasi']  # Replace 'upper realisasi' with actual column name

# Buat plot hasil prediksi
plt.figure(figsize=(12, 6))
plt.plot(time_series_data.index, time_series_data, marker='o', label="Data Aktual", color="orange")
plt.plot(forecast_index, forecast, marker='o', linestyle="dashed", label="Prediksi", color="red")

# Tambahkan area confidence interval
plt.fill_between(forecast_index, lower_conf, upper_conf, color='red', alpha=0.2, label="Confidence Interval")


# Format sumbu X agar lebih mudah dibaca
plt.xticks(rotation=45, ha="right")
plt.xlabel("Bulan")
plt.ylabel("Total Pembayaran Pajak")
plt.title("Prediksi Pembayaran Pajak untuk 6 Bulan ke Depan")
plt.legend()
plt.grid()

# Tampilkan plot
plt.show()

df["bulan"] = pd.to_datetime(df["bulan"], format="%Y-%m")
df["jenis_pajak"] = df["jenis_pajak"].astype("category")

# --- 1. Normalisasi Data (Min-Max Scaling) ---
df["realisasi_norm"] = df.groupby("jenis_pajak")["realisasi"].transform(lambda x: (x - x.min()) / (x.max() - x.min()))

# --- 2. Pisahkan Analisis Berdasarkan Jenis Pajak ---
pivot_pajak = df.pivot_table(values="realisasi_norm", index="bulan", columns="jenis_pajak", aggfunc="sum")

# --- 3. Lag Analysis: Melihat Pengaruh Bulan Sebelumnya terhadap Bulan Sekarang ---
df["realisasi_lag1"] = df.groupby("jenis_pajak")["realisasi"].shift(1)
df["realisasi_growth"] = df.groupby("jenis_pajak")["realisasi"].pct_change()

# --- 4. Korelasi dengan Uji Signifikansi ---
correlations = {}
p_values = {}

for pajak in pivot_pajak.columns:
    x = pivot_pajak[pajak].dropna()
    y = x.shift(1).dropna()  # Lag-1 korelasi
    if len(x) == len(y):  # Pastikan panjang sama
        corr, pval = pearsonr(x, y)
        correlations[pajak] = corr
        p_values[pajak] = pval

# Simpan dalam DataFrame
corr_df = pd.DataFrame({"Jenis Pajak": correlations.keys(), "Korelasi Lag-1": correlations.values(), "P-Value": p_values.values()})
corr_df["Signifikan"] = corr_df["P-Value"] < 0.05  # True jika p < 0.05

# --- 5. Analisis Triwulanan untuk Pola Musiman ---
df["kuartal"] = df["bulan"].dt.to_period("Q")
df_quarterly = df.groupby(["kuartal", "jenis_pajak"])["realisasi"].sum().reset_index()

# --- 6. Visualisasi Heatmap Korelasi ---
plt.figure(figsize=(10, 6))
sns.heatmap(pivot_pajak.corr(), annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Korelasi Pajak antar Bulan berdasarkan Jenis Pajak")
plt.show()

# --- 7. Prediksi Pola Pajak dengan Moving Average ---
df["realisasi_ma3"] = df.groupby("jenis_pajak")["realisasi"].transform(lambda x: x.rolling(3).mean())

# Plot pertumbuhan pajak per kuartal
plt.figure(figsize=(12, 6))
# Convert 'kuartal' column in df_quarterly to string before plotting
sns.lineplot(data=df_quarterly, x=df_quarterly["kuartal"].astype(str), y="realisasi", hue="jenis_pajak", marker="o")
plt.xticks(rotation=45)
plt.title("Tren Pajak per Kuartal")
plt.ylabel("Total Realisasi Pajak")
plt.show()

"""Grafik ini menunjukkan tren total realisasi pajak berdasarkan jenis pajak di setiap kuartal tahun 2023. Tiga jenis pajak yang dianalisis adalah HIBURAN, PARKIR, dan REKLAME, dengan total pembayaran pajak yang dinyatakan dalam skala besar (1e11 atau ratusan miliar rupiah).

Analisis Data
*   📌 HIBURAN menunjukkan tren peningkatan dari Q1 ke Q4, dengan kenaikan signifikan pada Q3 dan Q4. Ini bisa mengindikasikan peningkatan aktivitas hiburan di akhir tahun.
*   📌 PARKIR memiliki pergerakan yang lebih stabil, dengan sedikit peningkatan dari Q2 ke Q3, lalu stagnan di Q4.
*  📌 REKLAME mengalami penurunan dari Q1 ke Q3, tetapi kembali meningkat pada Q4. Ini mungkin disebabkan oleh siklus pengeluaran iklan, yang cenderung meningkat menjelang akhir tahun.


Kesimpulan

➡️ Pajak Hiburan mengalami tren positif sepanjang tahun, kemungkinan dipengaruhi oleh peningkatan acara atau kegiatan rekreasi.

➡️ Pajak Parkir relatif stabil tanpa fluktuasi besar, mungkin karena pola penggunaan parkir yang tidak banyak berubah.

➡️ Pajak Reklame mengalami penurunan di pertengahan tahun tetapi melonjak di akhir tahun, yang bisa terkait dengan peningkatan belanja iklan di Q4.
"""